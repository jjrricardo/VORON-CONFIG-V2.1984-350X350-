
#####################################################################
#   Displays
#####################################################################
[display]
# mini12864 LCD Display
lcd_type: uc1701
cs_pin: PC11
a0_pin: PD2
rst_pin: PC10
encoder_pins: ^PC6,^PC7
click_pin: ^!PA8
contrast: 63
spi_software_miso_pin: PA6
spi_software_mosi_pin: PA7
spi_software_sclk_pin: PA5
display_group: __voron_display

#[neopixel btt_mini12864]
[neopixel fysetc_mini12864]
# To control Neopixel RGB in mini12864 display
pin: PC12
chain_count: 3
initial_RED: 0
initial_GREEN: 0
initial_BLUE: 1
color_order: RGB
[neopixel chamber]
pin: PD3
chain_count: 144
initial_RED: 0.031
initial_GREEN: 0.031
initial_BLUE: 0.031
color_order: GRB

# Set LCD RGB at startup
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
  LED_READY

[gcode_macro LED_READY]
gcode:
  CANCEL_THERMOMETER
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0.92 BLUE=1.0 INDEX=1 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0.92 BLUE=1.0 INDEX=2 TRANSMIT=0
  SET_LED LED=fysetc_mini12864 RED=0 GREEN=0.92 BLUE=1.0 INDEX=3 
## Controle DISPLAY STATUS
[gcode_macro LED_SUCCESS]
gcode:
  CANCEL_THERMOMETER
  SET_LED LED=fysetc_mini12864 RED=0.0 GREEN=1.0 BLUE=0.0
    
[gcode_macro LED_FAIL]
gcode:
  CANCEL_THERMOMETER
  SET_LED LED=fysetc_mini12864 RED=1.0 GREEN=0.0 BLUE=0.0
  
[gcode_macro LED_STARTING]
gcode:
  LED_THERMOMETER
    
[gcode_macro LED_PRINTING]
gcode:
  CANCEL_THERMOMETER
  SET_LED LED=fysetc_mini12864 RED=1.0 GREEN=1.0 BLUE=1.0
    
[gcode_macro LED_PAUSED]
gcode:
  CANCEL_THERMOMETER
  SET_LED LED=fysetc_mini12864 RED=0.0 GREEN=1.0 BLUE=1.0
  
[gcode_macro LED_NIGHT_LIGHT]
gcode:
  CANCEL_THERMOMETER
  SET_LED LED=fysetc_mini12864 RED=0.1 GREEN=0.025 BLUE=0.0

[gcode_macro CANCEL_THERMOMETER]
gcode:
  UPDATE_DELAYED_GCODE ID=LED_THERMOMETER_REFRESH DURATION=0
  
[gcode_macro LED_THERMOMETER]
gcode:
  SET_LED_TEMPERATURES
  UPDATE_DELAYED_GCODE ID=LED_THERMOMETER_REFRESH DURATION=2  

[delayed_gcode LED_THERMOMETER_REFRESH]
initial_duration: 10.0
gcode:
    SET_LED_TEMPERATURES
    UPDATE_DELAYED_GCODE ID=LED_THERMOMETER_REFRESH DURATION=2

[gcode_macro SET_LED_TEMPERATURES]
variable_extruder_red: 0.0
variable_extruder_green: 0.0
variable_extruder_blue: 0.0
variable_bed_red: 0.0
variable_bed_green: 0.0
variable_bed_blue: 0.0
variable_status_red: 0.0
variable_status_green: 0.0
variable_status_blue: 0.0

gcode:
    # Start by setting safe default values
    {% set extruder_red = 1.0 %}
    {% set extruder_green = 0.0 %}
    {% set extruder_blue = 0.0 %}
    {% set bed_red = 1.0 %}
    {% set bed_green = 0.0 %}
    {% set bed_blue = 0.0 %}
    {% set status_red = 1.0 %}
    {% set status_green = 0.0 %}
    {% set status_blue = 0.0 %}

    # Make status display red if any heater is above 50C, otherwise green
    {% if printer.extruder.temperature >= 50 or printer.heater_bed.temperature >= 50 %}
        {% set status_red = 1.0 %}
        {% set status_green = 0.0 %}
        {% set status_blue = 0.0 %}
    {% else %}
        {% set status_red = 0.0 %}
        {% set status_green = 1.0 %}
        {% set status_blue = 1.0 %}
    {% endif %}

    # Get extruder target temperature, assume 260 if off (avoids divide-by-zero)
    {% if printer.extruder.target > 0.0 %}
      {% set extruder_target = printer.extruder.target|float %}
    {% else %}
      {% set extruder_target = 260.0 %}
    {% endif %}

    # Get bed target temperature, assume 115 if off (avoids divide-by-zero)
    {% if printer.heater_bed.target > 0.0 %}
      {% set bed_target = printer.heater_bed.target|float %}
    {% else %}
      {% set bed_target = 115.0 %}
    {% endif %}

    # Get actual temperatures as measured by the thermistors
    {% set extruder_actual = printer.extruder.temperature|float %}
    {% set bed_actual = printer.heater_bed.temperature|float %}

    # Set extruder LED colour
    {% set extruder_red = extruder_actual / extruder_target %}
    {% set extruder_green = 0.0 %}  
    {% set extruder_blue =(extruder_target - extruder_actual) / extruder_target %} 
    # Sanity checking - enforce range 0.0 to 1.0 inclusive
    {% if extruder_red > 1.0 %} {% set extruder_red = 1.0 %} {% endif %}
    {% if extruder_green > 1.0 %} {% set extruder_green = 1.0 %} {% endif %}
    {% if extruder_blue > 1.0 %} {% set extruder_blue = 1.0 %} {% endif %}
    {% if extruder_red < 0.0 %} {% set extruder_red = 0.0 %} {% endif %}
    {% if extruder_green < 0.0 %} {% set extruder_green = 0.0 %} {% endif %}
    {% if extruder_blue < 0.0 %} {% set extruder_blue = 0.0 %} {% endif %}


    # Set bed LED colour
    {% set bed_red = bed_actual / bed_target %}  
    {% set bed_green = 0.0 %}  
    {% set bed_blue = (bed_target - bed_actual) / bed_target %}
    # Sanity checking - enforce range 0.0 to 1.0 inclusive
    {% if bed_red > 1.0 %} {% set bed_red = 1.0 %} {% endif %}
    {% if bed_green > 1.0 %} {% set bed_green = 1.0 %} {% endif %}
    {% if bed_blue > 1.0 %} {% set bed_blue = 1.0 %} {% endif %}
    {% if bed_red < 0.0 %} {% set bed_red = 0.0 %} {% endif %}
    {% if bed_green < 0.0 %} {% set bed_green = 0.0 %} {% endif %}
    {% if bed_blue < 0.0 %} {% set bed_blue = 0.0 %} {% endif %}
    
    # Write the computed colour values to the neopixel LEDs.
    SET_LED LED=fysetc_mini12864 RED={status_red} GREEN={status_green} BLUE={status_blue} INDEX=3 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED={extruder_red} GREEN={extruder_green} BLUE={extruder_blue} INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED={bed_red} GREEN={bed_green} BLUE={bed_blue} INDEX=1 TRANSMIT=1



# Example LCDRGB R=1 G=0 B=0
[gcode_macro SET_LCD_RGB]
gcode:
	{% set r = params.R|default(1)|float %}
	{% set g = params.G|default(1)|float %}
	{% set b = params.B|default(1)|float %}

	SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=3

# https://github.com/AndrewEllis93/v2.247_backup_klipper_config/blob/master/lcd_tweaks.cfg
[display_glyph chamber]
data:
  ................
  ****************
  *....*....*....*
  *....*....*....*
  *....******....*
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...*......*...*
  ****************
  ................
  
[display_glyph voron]
data:
 ......***.......
 ....*******.....
 ...*********....
 .*************..
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 **..***..******.
 ******..***..**.
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 .*************..
 ...*********....
 ....*******.....
 ......***.......
 
[display_template _vheater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_data __voron_display chamber]
position: 2, 0
text:
  {% set chamber = printer['temperature_sensor enclosure_temp'] %}
	~chamber~
	{ "%3.0f" % (chamber.temperature,) }
	~degrees~

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "V2.1984" }
	~voron~
  {% endif %}